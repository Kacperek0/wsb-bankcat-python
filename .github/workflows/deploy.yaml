name: Deploy to AWS ECS

on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: bankcat-py
  ECS_SERVICE: bankcat-py-service
  ECS_CLUSTER: wsb-ecs-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: bankcat-py

jobs:
  test:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file
        id: create-dotenv
        run: |
          echo 'POSTGRES_USER="${{ secrets.POSTGRES_USER }}"' >> .env
          echo 'POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"' >> .env
          echo 'POSTGRES_SERVER="${{ secrets.POSTGRES_SERVER }}"' >> .env
          echo 'POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"' >> .env
          echo 'DATABASE_NAME="${{ secrets.DATABASE_NAME }}"' >> .env
          echo 'JWT_SECRET="${ secrets.JWT_SECRET }"' >> .env
          echo 'PORT="${ secrets.PORT }"' >> .env
          echo 'MAIL_USERNAME=${ secrets.MAIL_USERNAME }' >> .env
          echo 'MAIL_PASSWORD=${ secrets.MAIL_PASSWORD }' >> .env
          echo 'MAIL_FROM=${ secrets.MAIL_FROM }' >> .env
          echo 'MAIL_PORT=${ secrets.MAIL_PORT }' >> .env
          echo 'MAIL_SERVER=${ secrets.MAIL_SERVER }' >> .env
          echo 'MAIL_FROM_NAME=${ secrets.MAIL_FROM_NAME }' >> .env
          echo 'FRONTEND_URL=${ secrets.FRONTEND_URL }' >> .env

#           echo 'TEST_POSTGRES_USER="${{ secrets.TEST_POSTGRES_USER }}"' >> .env
#           echo 'TEST_POSTGRES_PASSWORD="${{ secrets.TEST_POSTGRES_PASSWORD }}"' >> .env
#           echo 'TEST_POSTGRES_SERVER="${{ secrets.TEST_POSTGRES_SERVER }}"' >> .env
#           echo 'TEST_POSTGRES_PORT="${{ secrets.TEST_POSTGRES_PORT }}"' >> .env
#           echo 'TEST_DATABASE_NAME="${{ secrets.DATABASE_NAME }}"' >> .env
#           echo 'TEST_JWT_SECRET="${ secrets.JWT_SECRET }"' >> .env

#       - name: Run tests with pytest
#         run: |
#           pip install -r requirements.txt
#           pytest

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
