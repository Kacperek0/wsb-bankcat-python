name: Test on pull request

on:
  pull_request:
    types: [edited, opened, synchronize, reopened]

jobs:
  deploy:
    name: Test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get upgrade --fix-missing
          sudo apt-get remove containerd runc -y
          sudo apt-get install -y docker.io

      - name: Start Postgres Container
        run: |
          sudo docker run --name postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres -p 5432:5432

      - name: Create .env file
        id: create-dotenv
        run: |
          echo 'TEST_POSTGRES_USER="postgres"' >> .env
          echo 'TEST_POSTGRES_PASSWORD="mysecretpassword"' >> .env
          echo 'TEST_POSTGRES_SERVER="postgres"' >> .env
          echo 'TEST_POSTGRES_PORT="${{ secrets.TEST_POSTGRES_PORT }}"' >> .env
          echo 'TEST_DATABASE_NAME="postgres"' >> .env
          echo 'JWT_SECRET="${{ secrets.JWT_SECRET }}"' >> .env
          echo 'PORT="${{ secrets.PORT }}"' >> .env
          echo 'MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}"' >> .env
          echo 'MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"' >> .env
          echo 'MAIL_FROM="${{ secrets.MAIL_FROM }}"' >> .env
          echo 'MAIL_PORT="${{ secrets.MAIL_PORT }}"' >> .env
          echo 'MAIL_SERVER="${{ secrets.MAIL_SERVER }}"' >> .env
          echo 'MAIL_FROM_NAME="${{ secrets.MAIL_FROM_NAME }}"' >> .env
          echo 'FRONTEND_URL="${{ secrets.FRONTEND_URL }}"' >> .env

      - name: Run tests with pytest
        run: |
          pip install -r requirements.txt
          pytest

